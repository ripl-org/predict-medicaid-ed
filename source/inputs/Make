Import("*")

tables = {}

# List of (table, primary key) pairs.
flatfiles = [
    ["other/ashp", "None", ","],
    ["public/ri_month_unemp", "None", ","],
    ["public/mn_proc_cde", "PROC_CDE", ","],
    ["public/mn_rev_cde", "REV_CDE", ","],
    ["public/weekdays", "DATE_DT", ","],
    ["ri360/MEDICAID-DIM_AID_CTG_CDE", "AID_CTG_CDE", "|"],
    ["ri360/MEDICAID-ED_MC_INST", "RECNUM", "|"],
    ["ri360/MEDICAID-ED_MC_PROF", "RECNUM", "|"],
    ["ri360/MEDICAID-ED_RHP_PROF", "RECNUM", "|"],
    ["ri360/MEDICAID-ENC_837_INST", "None", "|"],
    ["ri360/MEDICAID-ENC_837_INSTX", "None", "|"],
    ["ri360/MEDICAID-ENC_837_NURS_HM", "None", "|"],
    ["ri360/MEDICAID-ENC_837_PROF", "None", "|"],
    ["ri360/MEDICAID-ENC_837_PROFX", "None", "|"],
    ["ri360/MEDICAID-FFS_INST", "None", "|"],
    ["ri360/MEDICAID-FFS_INSTX", "None", "|"],
    ["ri360/MEDICAID-FFS_NURS_HM", "None", "|"],
    ["ri360/MEDICAID-FFS_PROF", "None", "|"],
    ["ri360/MEDICAID-FFS_PROFX", "None", "|"],
    ["ri360/RESEARCH_V11-DLT_TDI", "RECORD_ID", "|"],
    ["ri360/RESEARCH_V11-DLT_UI_PAYMENTS", "RECORD_ID", "|"],
    ["ri360/RESEARCH_V11-DLT_WAGE", "RECORD_ID", "|"],
    ["ri360/RESEARCH_V11-EOHHS_RECIP_DEMO", "RECORD_ID", "|"],
    ["ri360/RESEARCH_V11-EOHHS_RECIP_X_SSN", "RECORD_ID", "|"],
    ["ri360/RESEARCH_V11-RIIPL_ADDRESS", "None", "|"],
    ["ri360/RESEARCH_V11-RIIPL_DOC_EVENTS", "None", "|"],
    ["ri360/RESEARCH_V11-RIIPL_DOC_SENTENCES", "None", "|"],
    ["ri360/RESEARCH_V11-RIIPL_MEDICAID_ENROLLMENT_2", "None", "|"],
    ["ri360/RESEARCH_V11-RIIPL_MEDICAID_PHARMACY", "None", "|"]
]

for path, pk, delim in flatfiles:
    if path.startswith("ri360"):
        name = path.partition("-")[2].replace("RIIPL_", "").lower()
    else:
        name = path.partition("/")[2].lower()
    tables[name] = SQLTable("{}_{}".format(env.PROJECT_KEY, name))
    env.Python(tables[name],
               ["Load.py",
                "#input/{}.csv".format(path),
                "#schema/{}.txt".format(path),
                Value(pk),
                Value("'{}'".format(delim))],
               log_path="#output/inputs/load_{}.log".format(name))

# Split RI360 (MEGA) table into smaller chunks
splits = [
    ["mega_demo", "AGE,RACE,SEX,BMI,MARITAL_STATUS,DHS_HH_ID"],
    ["mega_pay", "SNAP_PAYMENTS,TANF_PAYMENTS,TDI_PAYMENTS,UI_PAYMENTS,SSI_SUPPLEMENT"]
]

for name, fields in splits:
    env.Python("#scratch/inputs/{}.csv".format(name),
               ["Split.py",
                "#input/ri360/RESEARCH_V11-MEGA.csv",
                Value(fields)],
               log_path="#output/inputs/split_{}.log".format(name))
    tables[name] = SQLTable("{}_{}".format(env.PROJECT_KEY, name))
    env.Python(tables[name],
               ["Load.py",
                "#scratch/inputs/{}.csv".format(name),
                "#schema/{}.txt".format(name),
                Value("RIIPL_ID,MONTH"),
                Value("'|'")],
               log_path="#output/inputs/load_{}.log".format(name))

# build DIM_DATE from scratch

tables["dim_date"] = SQLTable("{}_dim_date".format(env.PROJECT_KEY))
env.Python(tables["dim_date"], "dim_date.py")

# Medicaid derived tables

tables["rev_cde"] = SQLTable("{}_rev_cde".format(env.PROJECT_KEY))
env.Python(tables["rev_cde"],
           ["rev_cde.py",
            tables["enc_837_inst"],
            tables["ffs_inst"],
            tables["ffs_instx"],
            tables["ed_mc_inst"]])

tables["proc_cde"] = SQLTable("{}_proc_cde".format(env.PROJECT_KEY))
env.Python(tables["proc_cde"],
           ["proc_cde.py",
            tables["enc_837_inst"],
            tables["ffs_inst"],
            tables["ffs_instx"],
            tables["enc_837_prof"],
            tables["ffs_prof"],
            tables["ffs_profx"],
            tables["ed_mc_inst"],
            tables["ed_mc_prof"],
            tables["ed_rhp_prof"],
            tables["eohhs_recip_x_ssn"]])

tables["diag_cde"] = SQLTable("{}_diag_cde".format(env.PROJECT_KEY))
env.Python(tables["diag_cde"],
           ["diag_cde.py",
            tables["enc_837_inst"],
            tables["ffs_inst"],
            tables["ffs_instx"],
            tables["enc_837_prof"],
            tables["ffs_prof"],
            tables["ffs_profx"],
            tables["enc_837_nurs_hm"],
            tables["ffs_nurs_hm"],
            tables["ed_mc_inst"],
            tables["ed_mc_prof"],
            tables["ed_rhp_prof"],
            tables["eohhs_recip_x_ssn"]])

tables["claims"] = SQLTable("{}_claims".format(env.PROJECT_KEY))
env.Python(tables["claims"],
           ["claims.py",
            tables["enc_837_inst"],
            tables["ffs_inst"],
            tables["ffs_instx"],
            tables["enc_837_prof"],
            tables["ffs_prof"],
            tables["ffs_profx"],
            tables["enc_837_nurs_hm"],
            tables["ffs_nurs_hm"],
            tables["ed_mc_inst"],
            tables["ed_mc_prof"],
            tables["ed_rhp_prof"],
            tables["eohhs_recip_x_ssn"],
            tables["rev_cde"],
            tables["proc_cde"]])

tables["claims_dedup"] = SQLTable("{}_claims_dedup".format(env.PROJECT_KEY))
env.Python(tables["claims_dedup"],
           ["claims_dedup.py",
            tables["claims"]])

tables["hcpcs"] = SQLTable("{}_hcpcs".format(env.PROJECT_KEY))
env.Python([tables["hcpcs"]],
           ["hcpcs.py",
            "#public-data/hcpcs-sections.csv",
            "#public-data/cpt-sections.csv"])

Export("tables")

# vim: syntax=python expandtab sw=4 ts=4
